SOLID
S: Single Responsibility Principle (SRP)
    Each software module should have one and only one reason to change
    A module can refer to a class or a single function
    One Purpose
        Multipurpose tools don't perform as well as dedicated tools.
        Dedicated tools are easier to use
        A Problem with one part of a multipurpose tool can impact all parts
    
    What is a Responsibility?
        It is the class or function's task or purpose.
        It is to make sure that we model the business problem correctly.
        
    Reason to Change:
        Each module should have one responsibility.
        Responsibilities change at different times for different reasons.
        Each responsibility is a another/different axis of change.
            Axis of Change:
                Each stakeholder has different requirements and responsibilities they want to integrate into the software.
    
    SRP helps to create High Cohesion and Loose Coupling
O: Open Close Principle (OCP)
    Software entities (classes, modules, functions, etc.) should be opene for extension, but closed for modification.
    It should be possible to change the behavior of a method without editing its source code.
    
    Open to extension:
        New behavior can be added in the future.
        Code that is closed to extension has fixed behavior.
        
    Closed to modification:
        Changes to source or biniary code are not required.
        The only way to change the behavior of code that is closed to extension is to change the code itself.
    
    Why should code be closed to modification?
        Less likely to introduce bugs in code we don't touch or redeploy.
        Less likely to break dependent code when we don't have to deploy updates.
        Fewer conditionals in code that is open to extension in simpler code.
        Easier to understand and test.
        Bugs fixed are ok.
        
    Rules:
        Start Concrete
        Modify the code the first one or two times
        By the third modification, consider making the code open to extension for that axis of change.
    
    Typical Approach
        Passing parameters
        Using Inheritance
        Composition / Injection
        
    Use the "new" keyword to new up instances as less you can.
    Use new class for new features
        This way you can start from scratch and don't have to work around code.
        Nothing in the current system depeneds in it.
        Can add behavior without touching existing code.
        Any new class that you create can follow SRP (Single Responsibility Principle.
        Since you are designing it from scratch you can design it so that it is easily unit tested.
L: Liskov Substitution Principle (LSP)
    Subtypes must be substitutable for their subtypes.
    
    Inheritance has a "Is a" relationship
        An eagle "is a" bird
    Properties exhibit a "Has a" relationship
        An address "has a" city
        
    LSP states that the "Is a" relationship is insufficient and should be replaced with "Is Substitutable For"
    For Example:
        A rectangle has four side and four right angles.
        A square has equal sides and four right angles.
        In terms of Geomtry, a sqaure "is a" rectangle. It has every a rectangle has, 
        but a rectangle can only be a square under one condition (that all sides are equal).
        That is inheritance.
        
    If you are using a rectangle as a square than you are violating LSP.
I: Interface Segregation Principle (ISP)
D: Dependency Inversion Principle (DIP)

When to use SOLID?
You should use SOLID in a PDD Approach
PDD - Pain Driven Development
  Write your code using the simplest way you know how
Avoid Premature Optimization
If your current design is painful to work with, use the SOLID principles to guide redesign
Don't try to implement SOLID upfront, use them to eleminate pain and improve the software.

Tight Coupling:
    Binds two (or more) details together in a way that's difficult to change.
    
Loose Coupling:
    Offers a modular way to choose which details are involved in a particular operation.
    
Separation of Concern:
    Programs should be separated into distinct sections, each addressing a separate concern, or set of information that affects the program.

Relationship between classes represent coupling
Coupling is Cohesion but between classes

Keep classes small, focused, and testable.
