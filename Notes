What is Dependency Injection (AKA DI)?
Dependency Injection is a set of software design principles and patterns that enable us to develop loosely coupled code.
The goal with DI is to have loosely coupled code.

Why do we want Loosely Coupled Code?
Bc is it easy to extend, easy to test, easy to maintain, and it facitilates parrelel development.

Dependency Inject Patterns:
Constructor Injection
    Creates Loosely Coupled Code
    Forces a descision on a dependency. Requires you to specify a dependency.
Property Injection
    Class property is inialized for standard behavior
    By default, the standard behavior is used
    Property can be set to provide alternate behavior
Method Injection
Ambient Context
Service Locator

Construciton and Constructor are the most useful (for most people) and that is what these notes will focus on.

Application Layers:
View -> UI Elements
Presentation -> UI Logic
Data Access -> Think API
Data Store -> Think DB like AWS or GCP

MVVM
Model - View - ViewModel
Model: Everything Else: meaning all other logic and db calls
View: UI
ViewModel: Presentation Logic

Object Composition - Putting Loosely couples code together.

SOLID Principles
S: Single Responsibility Principle
    Our Object should have one reson to change.
O: Open/Close Principle
    Existing data readers can be extended without being modified.
L: Liskov Substition Principle
    Application can use the caching reader just like any other data reader.
    Descending calsses should behave the same way as base classes behave.
    Meaning that you can substitute a child class for a base class and the application (Calling Code) should not know the difference.

We can loosen a Coupling by using an interface

Repository Pattern:
Mediates between the domain and the data mapping layers using a collection-like interface for accessing domain objects. 
We can utilize Repository Pattern by creating and using an interface so the view-model does not have to directly call function in the model.

Tests:
Tests should follow the naming convention: NameOfPropert_FunctionType_Action() --> Ex: People_OnRefreshPeople_IsPopulated()

Tests should follow the Arrange, Act, Assert order
Arrange: getting the model and view setup
Act: Run the acction -> ex. RefreshPeople()
Assert: Run the unit test ex. Assert.IsNotNull(viewModel.People); Assert.AreEqual(2, viewModel.People.Count());
